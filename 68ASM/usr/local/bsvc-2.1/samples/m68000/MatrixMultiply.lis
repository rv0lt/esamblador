00000000                                     1  *
00000000                                     2  * Interactive Matrix Multiply program for the Motorola 68000
00000000                                     3  * 
00000000                                     4          ORG     $0 
00000000  00008000                           5          DC.L    $8000           Stack pointer value after a reset
00000004  00001000                           6          DC.L    START           Program counter value after a reset
00000008                                     7  
00000008                                     8  
00001000                                     9  	ORG	$1000
00001000                                    10  
00001000  =00EFFC01                         11  DUART	EQU	$effc01
00001000  =00000000                         12  MR1A	EQU	0
00001000  =00000000                         13  MR2A	EQU	0
00001000  =00000002                         14  SRA	EQU	2
00001000  =00000004                         15  CRA	EQU	4
00001000  =00000002                         16  CSRA	EQU	2
00001000  =00000006                         17  TBA	EQU	6
00001000  =00000006                         18  RBA	EQU	6
00001000  =0000000A                         19  IMR	EQU	10
00001000  =00000016                         20  TBB	EQU	$16
00001000  =00000014                         21  CRB	EQU	$14
00001000  =00000010                         22  MR1B	EQU	$10
00001000  =00000010                         23  MR2B	EQU	$10
00001000  =00000012                         24  SRB	EQU	$12
00001000                                    25  
00001000  43F9 00EFFC01                     26  START:	LEA	DUART,A1
00001006  137C 0010 0004                    27  	MOVE.B	#%00010000,CRA(A1)     Reset MR?A pointer
0000100C  137C 0023 0000                    28  	MOVE.B  #%00100011,MR1A(A1)    8 data bits
00001012  137C 0017 0000                    29  	MOVE.B  #%00010111,MR2A(A1)    Normal Mode
00001018  137C 00BB 0002                    30  	MOVE.B  #%10111011,CSRA(A1)    Set clock to 9600
0000101E  137C 0005 0004                    31  	MOVE.B  #%00000101,CRA(A1)     Enable Rx and Tx
00001024                                    32  
00001024  2E7C 00004000                     33  	MOVE.L	#$4000,A7              Setup the stack pointer
0000102A                                    34  
0000102A  4EB9 00001C00                     35  MAIN:	JSR CLEAR
00001030  4EB9 00001518                     36  	JSR TITLE
00001036                                    37  
00001036  4EB9 00001C00                     38  	JSR CLEAR
0000103C                                    39  
0000103C  4EB9 00001CB6                     40  	JSR GETSIZE
00001042                                    41  
00001042  3239 000010D6                     42  	MOVE.W	MA_C,D1
00001048  3039 000010D4                     43  	MOVE.W	MA_R,D0
0000104E  207C 000010DC                     44  	MOVE.L	#MA_DAT,A0
00001054  227C 000013FC                     45  	MOVE.L	#MA_TI,A1
0000105A  4EB9 000021AA                     46  	JSR	MATIN
00001060                                    47  
00001060  3239 000010DA                     48  	MOVE.W	MB_C,D1
00001066  3039 000010D8                     49  	MOVE.W	MB_R,D0
0000106C  207C 000011A4                     50  	MOVE.L	#MB_DAT,A0
00001072  227C 0000140C                     51  	MOVE.L	#MB_TI,A1
00001078  4EB9 000021AA                     52  	JSR MATIN
0000107E                                    53  
0000107E  3039 000010D4                     54  	MOVE.W	MA_R,D0
00001084  3239 000010D6                     55  	MOVE.W	MA_C,D1
0000108A  3439 000010D8                     56  	MOVE.W	MB_R,D2
00001090  3639 000010DA                     57  	MOVE.W	MB_C,D3
00001096  207C 000010DC                     58  	MOVE.L	#MA_DAT,A0
0000109C  227C 000011A4                     59  	MOVE.L	#MB_DAT,A1
000010A2  247C 0000126C                     60  	MOVE.L	#MC_DAT,A2
000010A8  4EB9 00001F24                     61  	JSR	MATMULT
000010AE                                    62  
000010AE  3039 000010D4                     63  	MOVE.W	MA_R,D0
000010B4  3239 000010DA                     64  	MOVE.W	MB_C,D1
000010BA  207C 0000126C                     65  	MOVE.L	#MC_DAT,A0
000010C0  227C 0000141C                     66  	MOVE.L	#MC_TI,A1
000010C6  4EB9 00001FA2                     67  	JSR	MATOUT
000010CC                                    68  
000010CC  4EF9 00002468                     69  	JMP	EXIT
000010D2  4E71                              70  	NOP
000010D4                                    71  
000010D4                                    72  MA_R:	DS.W	1
000010D6                                    73  MA_C:	DS.W	1
000010D8                                    74  MB_R:	DS.W	1
000010DA                                    75  MB_C:	DS.W	1
000010DC                                    76  MA_DAT:	DS.W	100				Matrix A Data
000011A4                                    77  MB_DAT:	DS.W	100                             Matrix B Data
0000126C                                    78  MC_DAT: DS.L	100				Matrix C Data (Result)
000013FC  45 6E 74 65 72 20 4D 61 74 ...    79  MA_TI:	DC.B	'Enter Matrix A',0,0
0000140C  45 6E 74 65 72 20 4D 61 74 ...    80  MB_TI:	DC.B	'Enter Matrix B',0,0
0000141C  52 65 73 75 6C 74 69 6E 67 ...    81  MC_TI:	DC.B	'Resulting Matrix C',0,0
00001430                                    82  
00001430                                    83  *
00001430                                    84  * Input a string
00001430                                    85  *
00001430                                    86  
00001430  48E7 FFFE                         87  INPUT:		MOVEM.L	A0-A6/D0-D7,-(A7)
00001434                                    88  
00001434  2A48                              89  		MOVE.L	A0,A5			Save buffer address
00001436  2C49                              90  		MOVE.L	A1,A6			Save valid string address
00001438  2E00                              91                  MOVE.L	D0,D7			Save Max length
0000143A  7200                              92  		MOVE.L	#0,D1			Current string length
0000143C                                    93  
0000143C  4EB9 000014F0                     94  IN_LOOP:	JSR	GETC			Get a character
00001442                                    95  
00001442  0C00 0008                         96  		CMPI.B	#$08,D0			Is it backspace
00001446  6700 0046                         97  		BEQ	IN_BS
0000144A                                    98  
0000144A  0C00 000D                         99  		CMPI.B	#$0D,D0			Is it return
0000144E  6700 0074                        100  		BEQ	IN_RET
00001452                                   101  
00001452                                   102  * Make sure it's a valid character
00001452  204E                             103  		MOVE.L	A6,A0
00001454  0C10 0000                        104  IN_VL:		CMPI.B	#0,(A0)			End of valid string?
00001458  6700 000A                        105  		BEQ	IN_INVALID
0000145C                                   106  
0000145C  B018                             107  		CMP.B	(A0)+,D0		Is it a valid char?
0000145E  6700 000E                        108  		BEQ	IN_VALID
00001462                                   109  
00001462  60F0                             110  		BRA	IN_VL			Loop
00001464                                   111  
00001464  4EB9 00001BF4                    112  IN_INVALID:	JSR	BELL			Sound Bell
0000146A  4EF8 143C                        113  		JMP	IN_LOOP			Get another character
0000146E                                   114  
0000146E  B247                             115  IN_VALID:	CMP.W	D7,D1			Have we reach max lenght?
00001470  6600 000C                        116  		BNE	IN_VA2			NO!
00001474                                   117  
00001474  4EB9 00001BF4                    118  		JSR	BELL
0000147A  4EF8 143C                        119  		JMP	IN_LOOP
0000147E                                   120  
0000147E  1B80 1000                        121  IN_VA2:		MOVE.B	D0,0(A5,D1)		Save character in buffer
00001482  5241                             122  		ADDI.W	#1,D1			Inc Lenght counter
00001484  4EB9 000014D0                    123  		JSR	PUTC			Output character to screen
0000148A                                   124  
0000148A  4EF8 143C                        125  		JMP	IN_LOOP
0000148E                                   126  
0000148E                                   127  
0000148E  0C41 0000                        128  IN_BS:		CMPI.W	#0,D1			Make sure no wrap around
00001492  6600 000C                        129  		BNE	IN_BOK
00001496                                   130  
00001496  4EB9 00001BF4                    131  		JSR	BELL
0000149C  4EF8 143C                        132  		JMP	IN_LOOP
000014A0                                   133  
000014A0  103C 0008                        134  IN_BOK:		MOVE.B	#$08,D0			BackSpace on screen
000014A4  4EB9 000014D0                    135  		JSR	PUTC
000014AA  103C 0020                        136  		MOVE.B	#$20,D0
000014AE  4EB9 000014D0                    137  		JSR	PUTC
000014B4  103C 0008                        138  		MOVE.B	#$08,D0
000014B8  4EB9 000014D0                    139  		JSR	PUTC
000014BE                                   140  
000014BE  5341                             141  		SUBI.W	#1,D1			Dec length counter
000014C0  4EF8 143C                        142  		JMP	IN_LOOP
000014C4                                   143  
000014C4                                   144  
000014C4  1BBC 0000 1000                   145  IN_RET:		MOVE.B	#0,0(A5,D1)		Null Terminate
000014CA                                   146  
000014CA  4CDF 7FFF                        147  		MOVEM.L	(A7)+,A0-A6/D0-D7	Restore REGS
000014CE                                   148  
000014CE  4E75                             149  		RTS
000014D0                                   150  *
000014D0                                   151  * Routines for performing Polled I/O At the Console Serial Port
000014D0                                   152  *
000014D0                                   153  * By: Bradford W. Mott
000014D0                                   154  *
000014D0                                   155  
000014D0  =0000000A                        156  LINEFEED:	EQU	10		* LineFeed Character value
000014D0  =0000000D                        157  CARR_RETURN:	EQU	13		* Carrage Return character value
000014D0                                   158  
000014D0                                   159  *
000014D0                                   160  * The character in D0 is transmitted to the CONSOLE ACIA.
000014D0                                   161  * The newline character <LF> is expanded into <LF>/<CR>.
000014D0                                   162  *
000014D0                                   163  
000014D0  0839 0002 00EFFC03               164  PUTC:	BTST	#2,SRA+DUART		* Test Transmit data register empty
000014D8  67F6                             165  	BEQ.S	PUTC			* If not keep polling
000014DA  13C0 00EFFC07                    166  	MOVE.B	D0,TBA+DUART		* Transmit the character
000014E0  B03C 000A                        167  	CMP.B	#LINEFEED,D0		* Check for LINEFEED
000014E4  6600 0008                        168  	BNE	PUTEXT
000014E8  103C 000D                        169  	MOVE.B	#CARR_RETURN,D0		* Load CR into D0
000014EC  60E2                             170  	BRA	PUTC			* Output CR
000014EE  4E75                             171  PUTEXT:	RTS				* Return to calling procedure
000014F0                                   172  
000014F0                                   173  
000014F0                                   174  *
000014F0                                   175  * Get a character from the CONSOLE ACIA and return it in D0
000014F0                                   176  *
000014F0                                   177  
000014F0  0839 0000 00EFFC03               178  GETC:	BTST	#0,SRA+DUART		* Test Receive data register full
000014F8  67F6                             179  	BEQ.S	GETC			* If not keep polling
000014FA  1039 00EFFC07                    180  	MOVE.B	RBA+DUART,D0		* Read the character
00001500  4E75                             181  	RTS
00001502                                   182  
00001502  2F00                             183  PRINT:		MOVE.L		D0,-(A7)	*SAVE CURRENT REGS TO STACK
00001504  1018                             184  PRLOOP:		MOVE.B		(A0)+,D0	*GET A CHARACTER
00001506  B03C 0000                        185  		CMP.B		#$00,D0		*IS IT A NULL CHARACTER?
0000150A  6700 0008                        186  		BEQ		PRNTEND		*IF SO, THEN YOU'RE DONE
0000150E  4EB8 14D0                        187  		JSR		PUTC		*IF NOT, THEN SEND CHARACTER TO SCREEN
00001512  60F0                             188  		BRA		PRLOOP		*LOOP UNTIL DONE
00001514  201F                             189  PRNTEND:	MOVE.L		(A7)+,D0	*RESTORE REGS
00001516  4E75                             190  		RTS
00001518                                   191  
00001518                                   192  
00001518  207C 00001538                    193  TITLE:		MOVE.L 	#SCREEN,A0	*INITIALIZE SCREEN DATA POINTER
0000151E  4EB8 1502                        194  TILP:		JSR	PRINT		*PRINT DATA TO SCREEN
00001522  0C10 003D                        195  		CMPI.B	#$3D,(A0)	*END OF SCREEN DATA?
00001526  66F6                             196  		BNE	TILP		*IF NOT THEN KEEP PRINTING DATA
00001528  4EB8 14F0                        197  TILP1:		JSR	GETC		*IF FINISHED, GET A KEY SRIKE
0000152C  0C00 000D                        198  		CMPI.B	#$0D,D0		*IS IT THE RETURN KEY?
00001530  66F6                             199  		BNE	TILP1		*IF NOT THEN TRY AGAIN
00001532  4EB8 1502                        200  		JSR	PRINT		*IF SO, THEN PRINT CLEAR SCREEN CHARACTERS
00001536  4E75                             201  		RTS			*RETURN TO MAIN
00001538                                   202  
00001538  1B 5B 32 4A                      203  SCREEN:		DC.B	$1B,'[2J'	
0000153C  2A 2A 2A 2A 08 08 08 08 1B ...   204  		DC.B	'****',$08,$08,$08,$08,$1B,'[4h'
00001548  20 20 20 20 20 20 20 20 20 ...   205  		DC.B	'                                                                        ****',$1B,'[4l',$1B,'E'
0000159A  2A 2A 08 08 1B 5B 34 68          206  		DC.B	'**',$08,$08,$1B,'[4h'
000015A2  20 20 20 20 20 20 20 20 20 ...   207  		DC.B	'                                                                            **',$1B,'[4l',$1B,'E'
000015F6  2A 20 2A 08 08 08 1B 5B 34 68    208  		DC.B	'* *',$08,$08,$08,$1B,'[4h'
00001600  20 20 20 20 20 20 20 20 20 ...   209  		DC.B	'                                                                          * *',$1B,'[4l',$1B,'E'
00001653  2A 08 1B 5B 34 68                210  		DC.B	'*',$08,$1B,'[4h'
00001659  20 20 20 20 20 20 20 20 20 ...   211  		DC.B	'                                                                              *',$1B,'[4l',$1B,'E',$1B,'E'
000016B0  20 20 20 20 20 20 20 20 20 ...   212  		DC.B	'                      M   M   A   TTTTT RRRR   III  X   X',$1B,'E'
000016EB  20 20 20 20 20 20 20 20 20 ...   213  		DC.B  	'                      MM MM  A A    T   R   R   I    X X ',$1B,'E'
00001726  20 20 20 20 20 20 20 20 20 ...   214  		DC.B	'                      M M M A   A   T   R   R   I     X  ',$1B,'E'
00001761  20 20 20 20 20 20 20 20 20 ...   215  		DC.B	'                      M   M AAAAA   T   RRRR    I    X X ',$1B,'E'
0000179C  20 20 20 20 20 20 20 20 20 ...   216  		DC.B	'                      M   M A   A   T   R  R    I   X   X',$1B,'E'
000017D7  20 20 20 20 20 20 20 20 20 ...   217  		DC.B	'                      M   M A   A   T   R   R  III  X   X',$1B,'E'
00001812  1B 45                            218  		DC.B	$1B,'E'
00001814  20 20 20 20 20 20 20 20 20 ...   219  		DC.B	'                M   M U   U L     TTTTT  III  PPPP  L     Y   Y',$1B,'E'
00001855  20 20 20 20 20 20 20 20 20 ...   220  		DC.B	'                MM MM U   U L       T     I   P   P L     Y   Y',$1B,'E'
00001896  20 20 20 20 20 20 20 20 20 ...   221  		DC.B	'                M M M U   U L       T     I   P   P L      Y Y ',$1B,'E'
000018D7  20 20 20 20 20 20 20 20 20 ...   222  		DC.B 	'                M   M U   U L       T     I   PPPP  L       Y  ',$1B,'E'
00001918  20 20 20 20 20 20 20 20 20 ...   223  		DC.B 	'                M   M U   U L       T     I   P     L       Y  ',$1B,'E'
00001959  20 20 20 20 20 20 20 20 20 ...   224  		DC.B	'                M   M  UUU  LLLLL   T    III  P     LLLLL   Y  ',$1B,'E'
0000199A  1B 45                            225  		DC.B	$1B,'E'
0000199C  2A 08 1B 5B 34 68                226  		DC.B	'*',$08,$1B,'[4h'
000019A2  20 20 20 20 20 20 20 20 20 ...   227  		DC.B	'                                                                              *',$1B,'[4l',$1B,'E'
000019F7  2A 20 2A 08 08 08 1B 5B 34 68    228  		DC.B	'* *',$08,$08,$08,$1B,'[4h'
00001A01  20 20 20 20 20 20 20 20 20 ...   229  		DC.B	'                                                                          * *',$1B,'[4l',$1B,'E'
00001A54  2A 2A 08 08 1B 5B 34 68          230  		DC.B	'**',$08,$08,$1B,'[4h'
00001A5C  20 20 20 20 20 20 20 20 20 ...   231  		DC.B	'                                                                            **',$1B,'[4l',$1B,'E'
00001AB0  2A 2A 2A 2A 08 08 08 08 1B ...   232  		DC.B	'****',$08,$08,$08,$08,$1B,'[4h'
00001ABC  20 20 20 20 20 20 20 20 20 ...   233  		DC.B	'                                                                        ****',$1B,'[4l',$1B,'E'
00001B0E  50 72 65 73 73 20 52 45 54 ...   234  		DC.B	'Press RETURN to Continue... ',$1B,'[4l',$00,$3D,$1B,'[2J',$00,$00
00001B36                                   235                                                                                  
00001B36  48E7 FFFE                        236  LTOA:		MOVEM.L		D0-D7/A0-A6,-(A7)
00001B3A                                   237  
00001B3A  113C 0000                        238  		MOVE.B		#$00,-(A0)	*APPEND NULL CHARACTER TO OUTPUT STRING
00001B3E  143C 0000                        239  		MOVE.B		#$00,D2		*SET NEGATIVE FLAG TO INDICATE NON NEGATIVE NUMBER FOR NOW
00001B42  2601                             240  		MOVE.L		D1,D3		*MOVE HEX OUTPUT (D1) TO HOLDER (D3)
00001B44  6A00 0014                        241  		BPL		LTOALOOP	*IF POSITIVE THEN GO CONVERT
00001B48  6600 000A                        242  		BNE 		LTOA2		*IF ZERO THEN YOUR FINISHED
00001B4C                                   243  
00001B4C  113C 0030                        244  		MOVE.B		#48,-(A0)
00001B50  6000 0026                        245  		BRA		LTOAEND
00001B54                                   246  
00001B54  4483                             247  LTOA2:		NEG.L		D3		*IF NEGATIVE THEN NEGATE
00001B56  1E3C 00AA                        248  		MOVE.B		#$AA,D7		*SET NEGATIVE FLAG
00001B5A                                   249  
00001B5A  4EB9 00001BD6                    250  LTOALOOP:	JSR		LDIV		*GO PERFORM LONG DIV BY 10 ON HEX NUMBER
00001B60  0643 0030                        251  		ADD.W		#$30,D3		*ADD $30 TO REMAINDER
00001B64  1103                             252  		MOVE.B		D3,-(A0)	*MOVE LSB TO ASCII CHAR STRING POINTER
00001B66  2600                             253  		MOVE.L		D0,D3		*MOVE RECEIVED QUOTIENT TO D3 TO SEND TO LDIV AGAIN
00001B68  4A80                             254  		TST.L		D0		*IS QUOTIENT EQUAL TO ZERO?
00001B6A  66EE                             255  		BNE		LTOALOOP	*IF NOT THEN KEEP CONVERTING
00001B6C                                   256  
00001B6C  0C07 00AA                        257  		CMPI.B		#$AA,D7		*WAS NEGATIVE FLAG SET?
00001B70  6600 0006                        258  		BNE		LTOAEND		*NO, GO TO THE END
00001B74  113C 002D                        259  		MOVE.B		#$2D,-(A0)	*YES, APPEND A NEGATIVE SIGN TO ASCII STRING
00001B78                                   260  
00001B78                                   261  
00001B78  4CDF 7FFF                        262  LTOAEND:	MOVEM.L		(A7)+,D0-D7/A0-A6
00001B7C  4E75                             263  		RTS				*RETURN
00001B7E                                   264  
00001B7E                                   265  
00001B7E  48E7 7FFE                        266  ATOL:		MOVEM.L		D1-D7/A0-A6,-(A7)	*SAVE PERTINENT REGISTERS
00001B82  183C 0000                        267  		MOVE.B		#0,D4		*SET NEGATIVE FLAG TO OFF
00001B86  7000                             268  		MOVE.L		#0,D0		*CLEAR RESULT REGISTER
00001B88  7200                             269  		MOVE.L		#0,D1		*CLEAR CHARACTER HOLDER
00001B8A                                   270  
00001B8A  1218                             271  ATOLLP1:	MOVE.B		(A0)+,D1	*GET FIRST CHARACTER IN ASCII STRING
00001B8C  6700 002C                        272  		BEQ		ATOLDONE	*IF NULL, THEN YOU'RE FINISHED
00001B90  227C 00001BCA                    273  		MOVE.L		#VALIDSTR,A1	*SET CHARACTER CHECK POINTER
00001B96                                   274  
00001B96  0C11 0000                        275  ATOLLP2:	CMP.B		#0,(A1)		*CHECKED FOR ALL VALID CHARACTERS?
00001B9A  67EE                             276  		BEQ		ATOLLP1		*IF YES, GET NEXT CHARACTER IN ASCII STRING
00001B9C  B23C 002D                        277  		CMP.B		#$2D,D1		*IS IT THE NEGATIVE SIGN?
00001BA0  6700 0012                        278  		BEQ		SETNEG		*IF YES, GO SET NEGATIVE FLAG
00001BA4  B219                             279  		CMP.B		(A1)+,D1	*IS THE CHARACTER VALID?
00001BA6  66EE                             280  		BNE		ATOLLP2		*IF NOT, COMPARE TO OTHER VALID CHARACTERS
00001BA8                                   281  		
00001BA8  C23C 000F                        282  		AND.B		#$0F,D1		*MASK UPPER BITS OF ASCII CHARACTER
00001BAC  C0FC 000A                        283  		MULU		#10,D0		*BEGIN CONVERSION TO BASE 10
00001BB0  D081                             284  		ADD.L		D1,D0		*ADD NEXT DIGIT IN STRING TO RESULT
00001BB2  60D6                             285  		BRA		ATOLLP1		*GET NEXT CHARACTER IN ASCII STRING
00001BB4                                   286  
00001BB4  183C 00FF                        287  SETNEG:		MOVE.B		#$FF,D4		*SET NEGATIVE FLAG
00001BB8  60D0                             288  		BRA		ATOLLP1		*GET NEXT CHARACTER IN ASCII STRING
00001BBA                                   289  
00001BBA  B83C 00FF                        290  ATOLDONE:	CMP.B		#$FF,D4		*WAS IT A NEGATIVE NUMBER?
00001BBE  6600 0004                        291  		BNE		ATOLEND		*NO, SKIP TO END
00001BC2  4480                             292  		NEG.L		D0		*YES, NEGATE THE RESULT
00001BC4                                   293  
00001BC4  4CDF 7FFE                        294  ATOLEND:	MOVEM.L		(A7)+,D1-D7/A0-A6	*RECALL PERTINENT REGISTERS
00001BC8  4E75                             295  		RTS				*RETURN RESULT
00001BCA                                   296  
00001BCA  31 32 33 34 35 36 37 38 39 ...   297  VALIDSTR:	DC.B		'1234567890',0,0
00001BD6                                   298  
00001BD6  2003                             299  LDIV:		MOVE.L		D3,D0		*STORE IN D0 FOR NOW
00001BD8  4243                             300  		CLR.W		D3		*CLEAR LOWER WORD OF DIVIDEND
00001BDA  4843                             301  		SWAP		D3		*MOVE UPPER WORD TO LOWER POSITION
00001BDC  4840                             302  		SWAP		D0		*SWAP THE HOLDER
00001BDE  86FC 000A                        303  		DIVU		#$A,D3		*PERFORM CONVERSION DIVISION
00001BE2  3003                             304  		MOVE.W		D3,D0		*MOVE MSW QUOTIENT TO D0
00001BE4  4840                             305  		SWAP		D0		*SWAP IT INTO MSW POSITION
00001BE6  3600                             306  		MOVE.W		D0,D3		*MOVE LSW INTO DIVIDEND
00001BE8  86FC 000A                        307  		DIVU		#$A,D3		*PERFORM CONVERSION DIVISION
00001BEC  3003                             308  		MOVE.W		D3,D0		*MOVE LSW QUOTIENT TO D0
00001BEE  4243                             309  		CLR.W		D3		*CLEARS LSW QUOTIENT FROM D3
00001BF0  4843                             310  		SWAP 		D3		*SWAPS TOTAL REMAINDER TO LSW OF D3
00001BF2  4E75                             311  		RTS				*RETURNS BIG QUOTIENT (D0), REMAINDER (D3)*
00001BF4                                   312  * Routines to control the Terminal Display
00001BF4                                   313  *
00001BF4                                   314  * By: Bradford W. Mott
00001BF4                                   315  *
00001BF4                                   316  
00001BF4                                   317  
00001BF4  =00000007                        318  BELL_CODE:	EQU	07
00001BF4                                   319  
00001BF4                                   320  
00001BF4                                   321  *
00001BF4                                   322  * This routine sounds the terminal bell
00001BF4                                   323  *
00001BF4                                   324  
00001BF4  2F00                             325  BELL:	MOVE.L	D0,-(A7)		* Save D0 on stack
00001BF6  7007                             326  	MOVE.L	#BELL_CODE,D0		* Get the BELL character
00001BF8  4EB8 14D0                        327  	JSR	PUTC			* Transmit it to the TERMINAL
00001BFC  201F                             328  	MOVE.L	(A7)+,D0		* Restore D0
00001BFE  4E75                             329  	RTS				* Return to calling procedure
00001C00                                   330  
00001C00                                   331  
00001C00                                   332  *
00001C00                                   333  * This routine clears the terminal display and homes the cursor
00001C00                                   334  *
00001C00                                   335  
00001C00  48E7 8080                        336  CLEAR:	MOVEM.L	D0/A0,-(A7)		* Save A0&D0 on stack
00001C04  207C 00001C1C                    337  	MOVE.L	#CLRSTR,A0		* Load address of clear screen string
00001C0A  1018                             338  CLLOOP:	MOVE.B	(A0)+,D0		* Get a character
00001C0C  6700 0008                        339  	BEQ	CLEXT			* EXIT on NULL
00001C10  4EB8 14D0                        340  	JSR	PUTC			* Put character to display
00001C14  60F4                             341  	BRA	CLLOOP			* Loop
00001C16  4CDF 0101                        342  CLEXT:	MOVEM.L	(A7)+,D0/A0		* Restore A0&D0
00001C1A  4E75                             343  	RTS				* Return to calling procedure
00001C1C                                   344  
00001C1C  1B 5B 3B 48 1B 5B 32 4A 00 00    345  CLRSTR:	DC.B 27,'[;H',27,'[2J',0,0	* Clear Screen code for VT100
00001C26                                   346  
00001C26                                   347  
00001C26                                   348  
00001C26                                   349  *
00001C26                                   350  * This routine moves the display's cursor to the X/Y coordinates
00001C26                                   351  * specified in the D0 & D1 registers (X=D0,Y=D1)
00001C26                                   352  *
00001C26                                   353  
00001C26  48E7 FFFE                        354  POSITION:	MOVEM.L	D0-D7/A0-A6,-(A7)	* Save D0-D1 & A0 on stack
00001C2A                                   355  
00001C2A  0280 000000FF                    356  		ANDI.L	#255,D0		* Clear the unused parts of 
00001C30  0281 000000FF                    357  		ANDI.L	#255,D1		* data register
00001C36                                   358  
00001C36  207C 00001CA4                    359  		MOVE.L  #POSSTR+2,A0	* Address of row substring
00001C3C  82FC 000A                        360  		DIVU	#10,D1		* Let's convert row number to ASCII
00001C40  0601 0030                        361  		ADDI.B	#48,D1
00001C44  10C1                             362  		MOVE.B	D1,(A0)+	* Put in POSSTR
00001C46  4841                             363  		SWAP	D1
00001C48  0601 0030                        364  		ADDI.B	#48,D1
00001C4C  1081                             365  		MOVE.B	D1,(A0)		* Put in POSSTR
00001C4E                                   366  
00001C4E  13FC 0030 00001CA7               367  		MOVE.B	#48,POSSTR+5
00001C56  0C40 0064                        368  		CMPI.W	#100,D0
00001C5A  6D00 000E                        369  		BLT	POS2
00001C5E                                   370  
00001C5E  0440 0064                        371  		SUBI.W	#100,D0
00001C62  13FC 0031 00001CA7               372  		MOVE.B  #49,POSSTR+5
00001C6A                                   373  
00001C6A  207C 00001CA8                    374  POS2:		MOVE.L	#POSSTR+6,A0	* Address of col substring
00001C70  80FC 000A                        375  		DIVU	#10,D0		* Let's convert column number to ASCII
00001C74  0600 0030                        376  		ADDI.B	#48,D0
00001C78  10C0                             377  		MOVE.B	D0,(A0)+	* Put in POSSTR
00001C7A  4840                             378  		SWAP	D0
00001C7C  0600 0030                        379  		ADDI.B	#48,D0
00001C80  1080                             380  		MOVE.B	D0,(A0)		* Put in POSSTR
00001C82                                   381  
00001C82  207C 00001CA2                    382  		MOVE.L	#POSSTR,A0	* Get addr of POSITION string
00001C88  1018                             383  POSLOOP:	MOVE.B	(A0)+,D0	* Get a character
00001C8A  6700 0008                        384  		BEQ	POSEXT		* Exit on NULL
00001C8E  4EB8 14D0                        385  		JSR 	PUTC		* Send to the terminal
00001C92  60F4                             386  		BRA	POSLOOP		* Loop
00001C94                                   387  	
00001C94  4CDF 7FFF                        388  POSEXT:		MOVEM.L	(A7)+,D0-D7/A0-A6	* Restore registers
00001C98  4E75                             389  		RTS			* Return to calling procedure
00001C9A                                   390  
00001C9A  0000 0000 0000 0000              391  		DC.W	0,0,0,0
00001CA2  1B 5B 30 30 3B 30 30 30 3B ...   392  POSSTR: 	DC.B 27,'[00;000;H',0		* Position Cursor code for VT100
00001CAE  0000 0000 0000 0000              393  		DC.W	0,0,0,0
00001CB6                                   394  
00001CB6                                   395  
00001CB6                                   396  
00001CB6                                   397  
00001CB6                                   398  
00001CB6                                   399  *
00001CB6                                   400  * This routine gets the sizes of the two matrices to multiply
00001CB6                                   401  *
00001CB6                                   402  
00001CB6  48E7 FFFE                        403  GETSIZE:	MOVEM.L	D0-D7/A0-A6,-(SP)
00001CBA                                   404  
00001CBA  4EB8 1C00                        405  		JSR CLEAR
00001CBE                                   406  
00001CBE  207C 00001E20                    407  		MOVE.L	#GS_TIT,A0		Print title
00001CC4  4EB8 1502                        408  		JSR	PRINT
00001CC8                                   409  
00001CC8                                   410  
00001CC8  207C 00001E7C                    411  GS_GAC:		MOVE.L	#GS_CA,A0
00001CCE  4EB8 1502                        412  		JSR	PRINT
00001CD2                                   413  
00001CD2  227C 00001EDE                    414  		MOVE.L	#GS_VALID,A1		Get number of columns
00001CD8  207C 00001EEA                    415  		MOVE.L	#GS_BUFFER,A0
00001CDE  303C 0002                        416  		MOVE.W	#2,D0
00001CE2  4EB8 1430                        417  		JSR	INPUT
00001CE6                                   418  
00001CE6  207C 00001EEA                    419  		MOVE.L	#GS_BUFFER,A0
00001CEC  4EB8 1B7E                        420  		JSR	ATOL
00001CF0  31C0 10D6                        421  		MOVE.W	D0,MA_C
00001CF4                                   422  
00001CF4  0C40 000A                        423  		CMPI.W	#10,D0
00001CF8  6E00 000E                        424  		BGT	GS_ACA
00001CFC  0C40 0001                        425  		CMPI.W	#1,D0
00001D00  6D00 0006                        426  		BLT	GS_ACA
00001D04  6000 0010                        427  		BRA	GS_GAR
00001D08                                   428  
00001D08  207C 00001EF0                    429  GS_ACA:		MOVE.L	#GS_ERROR,A0
00001D0E  4EB8 1502                        430  		JSR	PRINT
00001D12  4EF8 1CC8                        431  		JMP	GS_GAC
00001D16                                   432  
00001D16                                   433  
00001D16                                   434  
00001D16  207C 00001E94                    435  GS_GAR:		MOVE.L	#GS_RA,A0
00001D1C  4EB8 1502                        436  		JSR	PRINT
00001D20                                   437  
00001D20  227C 00001EDE                    438  		MOVE.L	#GS_VALID,A1		Get number of columns
00001D26  207C 00001EEA                    439  		MOVE.L	#GS_BUFFER,A0
00001D2C  303C 0002                        440  		MOVE.W	#2,D0
00001D30  4EB8 1430                        441  		JSR	INPUT
00001D34                                   442  
00001D34  207C 00001EEA                    443  		MOVE.L	#GS_BUFFER,A0
00001D3A  4EB8 1B7E                        444  		JSR	ATOL
00001D3E  31C0 10D4                        445  		MOVE.W	D0,MA_R
00001D42                                   446  
00001D42  0C40 000A                        447  		CMPI.W	#10,D0
00001D46  6E00 000E                        448  		BGT	GS_ARA
00001D4A  0C40 0001                        449  		CMPI.W	#1,D0
00001D4E  6D00 0006                        450  		BLT	GS_ARA
00001D52  6000 0010                        451  		BRA	GS_GBC
00001D56                                   452  
00001D56  207C 00001EF0                    453  GS_ARA:		MOVE.L	#GS_ERROR,A0
00001D5C  4EB8 1502                        454  		JSR	PRINT
00001D60  4EF8 1D16                        455  		JMP	GS_GAR
00001D64                                   456  
00001D64                                   457  
00001D64                                   458  
00001D64  207C 00001EAC                    459  GS_GBC:		MOVE.L	#GS_CB,A0
00001D6A  4EB8 1502                        460  		JSR 	PRINT
00001D6E                                   461  
00001D6E  227C 00001EDE                    462  		MOVE.L	#GS_VALID,A1		Get number of columns
00001D74  207C 00001EEA                    463  		MOVE.L	#GS_BUFFER,A0
00001D7A  303C 0002                        464  		MOVE.W	#2,D0
00001D7E  4EB8 1430                        465  		JSR	INPUT
00001D82                                   466  
00001D82  207C 00001EEA                    467  		MOVE.L	#GS_BUFFER,A0
00001D88  4EB8 1B7E                        468  		JSR	ATOL
00001D8C  31C0 10DA                        469  		MOVE.W	D0,MB_C
00001D90                                   470  
00001D90  0C40 000A                        471  		CMPI.W	#10,D0
00001D94  6E00 000E                        472  		BGT	GS_BCA
00001D98  0C40 0001                        473  		CMPI.W	#1,D0
00001D9C  6D00 0006                        474  		BLT	GS_BCA
00001DA0  6000 0010                        475  		BRA	GS_GBR
00001DA4                                   476  
00001DA4  207C 00001EF0                    477  GS_BCA:		MOVE.L	#GS_ERROR,A0
00001DAA  4EB8 1502                        478  		JSR	PRINT
00001DAE  4EF8 1D64                        479  		JMP	GS_GBC
00001DB2                                   480  
00001DB2                                   481  
00001DB2                                   482  
00001DB2  207C 00001EC6                    483  GS_GBR:		MOVE.L	#GS_RB,A0
00001DB8  4EB8 1502                        484  		JSR 	PRINT
00001DBC                                   485  
00001DBC  227C 00001EDE                    486  		MOVE.L	#GS_VALID,A1		Get number of columns
00001DC2  207C 00001EEA                    487  		MOVE.L	#GS_BUFFER,A0
00001DC8  303C 0002                        488  		MOVE.W	#2,D0
00001DCC  4EB8 1430                        489  		JSR	INPUT
00001DD0                                   490  
00001DD0  207C 00001EEA                    491  		MOVE.L	#GS_BUFFER,A0
00001DD6  4EB8 1B7E                        492  		JSR	ATOL
00001DDA  31C0 10D8                        493  		MOVE.W	D0,MB_R
00001DDE                                   494  
00001DDE  0C40 000A                        495  		CMPI.W	#10,D0
00001DE2  6E00 000E                        496  		BGT	GS_BRA
00001DE6  0C40 0001                        497  		CMPI.W	#1,D0
00001DEA  6D00 0006                        498  		BLT	GS_BRA
00001DEE  6000 0010                        499  		BRA	GS_TEST
00001DF2                                   500  
00001DF2  207C 00001EF0                    501  GS_BRA:		MOVE.L	#GS_ERROR,A0
00001DF8  4EB8 1502                        502  		JSR	PRINT
00001DFC  4EF8 1DB2                        503  		JMP	GS_GBR
00001E00                                   504  
00001E00                                   505  
00001E00  3038 10D6                        506  GS_TEST:	MOVE.W	MA_C,D0
00001E04  B078 10D8                        507  		CMP.W	MB_R,D0
00001E08  6700 0010                        508  		BEQ	GS_OK
00001E0C                                   509  
00001E0C  207C 00001F02                    510  		MOVE.L	#GS_BERR,A0
00001E12  4EB8 1502                        511  		JSR	PRINT
00001E16  4EF8 1CC8                        512  		JMP	GS_GAC
00001E1A                                   513  
00001E1A  4CDF 7FFF                        514  GS_OK:		MOVEM.L	(A7)+,D0-D7/A0-A6
00001E1E  4E75                             515  		RTS
00001E20                                   516  
00001E20                                   517  
00001E20  20 4D 61 74 72 69 78 20 4D ...   518  GS_TIT:		DC.B	' Matrix Multiply ',10
00001E32  2D 2D 2D 2D 2D 2D 2D 2D 2D ...   519  		DC.B	'-----------------',10,10
00001E45  50 6C 65 61 73 65 20 65 6E ...   520  		DC.B	'Please enter the sizes of the matrices to multiply.',10,10,0,0
00001E7C                                   521  
00001E7C  0A 43 6F 6C 75 6D 6E 73 20 ...   522  GS_CA:		DC.B	10,'Columns in matrix A : ',0
00001E94  0A 52 6F 77 73 20 69 6E 20 ...   523  GS_RA:		DC.B	10,'Rows in matrix A    : ',0
00001EAC  0A 0A 43 6F 6C 75 6D 6E 73 ...   524  GS_CB:		DC.B	10,10,'Columns in matrix B : ',0,0
00001EC6  0A 52 6F 77 73 20 69 6E 20 ...   525  GS_RB:		DC.B	10,'Rows in matrix B    : ',0
00001EDE                                   526  
00001EDE  30 31 32 33 34 35 36 37 38 ...   527  GS_VALID:	DC.B	'0123456789',0,0
00001EEA  00 00 00 00 00 00                528  GS_BUFFER:	DC.B	0,0,0,0,0,0
00001EF0                                   529  
00001EF0  0A 49 6E 76 61 6C 69 64 20 ...   530  GS_ERROR:	DC.B	10,'Invalid size!!!',10,0	
00001F02  0A 4D 61 74 72 69 78 20 73 ...   531  GS_BERR:	DC.B	10,'Matrix sizes incompatible!!!!!',10,0,0
00001F24                                   532  *
00001F24                                   533  * This routine multiplies two matrices and stores the resulting
00001F24                                   534  * matrix. ( C=AB )
00001F24                                   535  *
00001F24                                   536  * A0 = Matrix A
00001F24                                   537  * A1 = Matrix B
00001F24                                   538  * A2 = Matrix C
00001F24                                   539  *
00001F24                                   540  * D0 = Matrix A number of rows (i)
00001F24                                   541  * D1 = Matrix A number of columns
00001F24                                   542  * D2 = Matrix B number of rows
00001F24                                   543  * D3 = Matrix B number of columns (j)
00001F24                                   544  *
00001F24                                   545  
00001F24                                   546  MATMULT:
00001F24  48E7 FFFE                        547  	MOVEM.L	D0-D7/A0-A6,-(A7)
00001F28                                   548  
00001F28  33C3 00001FA0                    549  	MOVE.W	D3,B_COLS		Save Columns in C
00001F2E                                   550  
00001F2E  3639 00001FA0                    551  I_LOOP:	MOVE.W	B_COLS,D3
00001F34  5340                             552  	SUBI.W	#1,D0
00001F36  6B00 005E                        553  	BMI	MATFIN
00001F3A                                   554  
00001F3A  23FC 00000000 00001F9C           555  J_LOOP:	MOVE.L	#0,SUM
00001F44  3801                             556  	MOVE.W	D1,D4		T Counter
00001F46  5344                             557  	SUBI.W	#1,D4
00001F48                                   558  
00001F48  5343                             559  	SUB.W	#1,D3
00001F4A  6BE2                             560  	BMI	I_LOOP
00001F4C                                   561  
00001F4C  3A01                             562  T_LOOP:	MOVE.W	D1,D5		Num Columns in A
00001F4E  CAC0                             563  	MULU	D0,D5		I * Columns in A
00001F50  DA44                             564  	ADD.W	D4,D5		+ T
00001F52  CAFC 0002                        565  	MULU	#2,D5		Words
00001F56  7C00                             566  	MOVEQ	#0,D6
00001F58  3C30 5000                        567  	MOVE.W	(A0,D5),D6	Get A(i,t)
00001F5C                                   568  
00001F5C  3A39 00001FA0                    569  	MOVE.W	B_COLS,D5		Num Columns in B
00001F62  CAC4                             570  	MULU	D4,D5		T * Columns in B
00001F64  DA43                             571  	ADD.W	D3,D5		+ J
00001F66  CAFC 0002                        572  	MULU	#2,D5
00001F6A  7E00                             573  	MOVEQ	#0,D7
00001F6C  3E31 5000                        574  	MOVE.W	(A1,D5),D7	Get B(t,j)
00001F70                                   575  
00001F70  CFC6                             576  	MULS	D6,D7		A(i,t)*B(t,j)
00001F72  DFB9 00001F9C                    577  	ADD.L	D7,SUM		add to running Sum
00001F78                                   578  
00001F78  5344                             579  	SUBI.W	#1,D4
00001F7A  6AD0                             580  	BPL	T_LOOP
00001F7C                                   581  
00001F7C  3A39 00001FA0                    582  	MOVE.W	B_COLS,D5	Num Columns in C
00001F82  CAC0                             583  	MULU	D0,D5		I * Num Columns in C
00001F84  DA43                             584  	ADD.W	D3,D5		+ J
00001F86  CAFC 0004                        585  	MULU	#4,D5
00001F8A  25B9 00001F9C 5000               586  	MOVE.L	SUM,(A2,D5)	Store C(i,j)
00001F92                                   587  
00001F92  60A6                             588  	BRA	J_LOOP
00001F94  6098                             589  	BRA	I_LOOP
00001F96                                   590  
00001F96  4CDF 7FFF                        591  MATFIN:	MOVEM.L	(A7)+,D0-D7/A0-A6
00001F9A  4E75                             592  	RTS
00001F9C                                   593  
00001F9C                                   594  
00001F9C  00000001                         595  SUM:	DC.L	$1
00001FA0  0001                             596  B_COLS:	DC.W	$1
00001FA2                                   597  *
00001FA2                                   598  *	 MATOUT
00001FA2                                   599  **
00001FA2                                   600  * D0 contains the number of columns
00001FA2                                   601  * D1 contains the number of rows
00001FA2                                   602  *
00001FA2                                   603  * A0 contains a pointer to a buffer to store matrix elements in
00001FA2                                   604  * A1 contains a pointer to the a title string
00001FA2                                   605  *
00001FA2                                   606  * By: Bradford W. Mott
00001FA2                                   607  *
00001FA2                                   608  
00001FA2                                   609  
00001FA2  48E7 FFFE                        610  MATOUT:		MOVEM.L	A0-A6/D0-D7,-(A7)	Save registers on stack
00001FA6                                   611  
00001FA6  23C8 00002196                    612  		MOVE.L	A0,MO_DATA		Store buffer address
00001FAC  33C0 0000219A                    613  		MOVE.W	D0,MO_ROW		Store num of rows
00001FB2  33C1 0000219C                    614  		MOVE.W	D1,MO_COL		Store num of columns
00001FB8                                   615  
00001FB8                                   616  
00001FB8  4EB8 1C00                        617  		JSR	CLEAR			Clear the display
00001FBC                                   618  
00001FBC  207C 0000219E                    619  		MOVE.L	#MO_32ON,A0		Turn 132 mode on
00001FC2  4EB8 1502                        620  		JSR	PRINT
00001FC6                                   621  
00001FC6  303C 0039                        622  		MOVE.W	#57,D0			X position of cursor
00001FCA  323C 0002                        623  		MOVE.W	#2,D1			Y position of cursor
00001FCE  4EB8 1C26                        624  		JSR	POSITION		Position the Cursor
00001FD2                                   625  
00001FD2  2049                             626  		MOVE.L	A1,A0			Print the Title String
00001FD4  4EB8 1502                        627  		JSR	PRINT
00001FD8                                   628  
00001FD8                                   629  
00001FD8  207C 0000217E                    630  		MOVE.L	#MO_Y,A0		Pointer to Y position array
00001FDE  7000                             631  		MOVEQ	#0,D0			Clear LCV (Loop Control Var)
00001FE0                                   632  
00001FE0  323C 0014                        633  MO_L1:		MOVE.W	#20,D1			Calculate Y position
00001FE4  9279 0000219A                    634  		SUB.W	MO_ROW,D1
00001FEA  82FC 0002                        635  		DIVU	#2,D1
00001FEE  D240                             636  		ADD.W	D0,D1			(20-row)/2+counter
00001FF0  1181 0000                        637  		MOVE.B	D1,0(A0,D0)		Store in array
00001FF4                                   638  
00001FF4  5240                             639  		ADDQ.W	#1,D0
00001FF6  B079 0000219A                    640  		CMP.W	MO_ROW,D0
00001FFC  66E2                             641  		BNE	MO_L1
00001FFE                                   642  
00001FFE                                   643  
00001FFE  207C 0000218A                    644  		MOVE.L	#MO_X,A0		Pointer to X position array
00002004  7000                             645  		MOVEQ	#0,D0			Clear LCV (Loop Control Var)
00002006                                   646  
00002006  323C 0084                        647  MO_L2:		MOVE.W	#132,D1			Calculate X position
0000200A  3439 0000219C                    648  		MOVE.W  MO_COL,D2
00002010  C4FC 000A                        649  		MULU	#10,D2
00002014  9242                             650  		SUB.W	D2,D1
00002016  82FC 0002                        651  		DIVU	#2,D1
0000201A  3400                             652  		MOVE.W	D0,D2
0000201C  C4FC 000A                        653  		MULU	#10,D2
00002020  D242                             654  		ADD.W	D2,D1			(132-col*10)/2+counter*10
00002022  1181 0000                        655  		MOVE.B	D1,0(A0,D0)		Store in array
00002026                                   656  
00002026  5240                             657  		ADDQ.W	#1,D0
00002028  B079 0000219C                    658  		CMP.W	MO_COL,D0
0000202E  66D6                             659  		BNE	MO_L2
00002030                                   660  
00002030                                   661  
00002030                                   662  * Draw the Matrix outline
00002030                                   663  
00002030  207C 0000217E                    664  		MOVE.L	#MO_Y,A0		Pointer to Y position array
00002036  7E00                             665  		MOVEQ	#0,D7			Clear LCV (Loop Control Var)
00002038                                   666  
00002038  303C 0084                        667  MO_L3:		MOVE.W	#132,D0			Calculate X position
0000203C  3239 0000219C                    668  		MOVE.W	MO_COL,D1
00002042  C2FC 000A                        669  		MULU	#10,D1
00002046  9041                             670  		SUB.W	D1,D0
00002048  80FC 0002                        671  		DIVU	#2,D0
0000204C  5540                             672  		SUBI.W	#2,D0			D0=(132-col*10)/2-2
0000204E                                   673  
0000204E  1230 7000                        674  		MOVE.B	0(A0,D7),D1		Get Y Position
00002052                                   675  
00002052  4EB8 1C26                        676  		JSR	POSITION		Position Cursor
00002056  103C 007C                        677  		MOVE.B	#$7C,D0			the "|" character
0000205A  4EB8 14D0                        678  		JSR	PUTC
0000205E                                   679  
0000205E                                   680  
0000205E  303C 0084                        681  		MOVE.W	#132,D0			Calculate X position
00002062  3239 0000219C                    682  		MOVE.W	MO_COL,D1
00002068  C2FC 000A                        683  		MULU	#10,D1
0000206C  9041                             684  		SUB.W	D1,D0
0000206E  80FC 0002                        685  		DIVU	#2,D0
00002072  D041                             686  		ADD.W	D1,D0			D0=(132-col*10)/2+col*10
00002074                                   687  
00002074  1230 7000                        688  		MOVE.B	0(A0,D7),D1		Get Y Position
00002078                                   689  
00002078  4EB8 1C26                        690  		JSR	POSITION		Position Cursor
0000207C  103C 007C                        691  		MOVE.B	#$7C,D0			the "|" character
00002080  4EB8 14D0                        692  		JSR	PUTC
00002084                                   693  
00002084  5247                             694  		ADDQ.W	#1,D7
00002086  BE79 0000219A                    695  		CMP.W	MO_ROW,D7
0000208C  66AA                             696  		BNE	MO_L3
0000208E                                   697  
0000208E                                   698  * Get the data for each element.
0000208E                                   699  
0000208E  7E00                             700  		MOVEQ	#0,D7			LCV for row
00002090  267C 0000218A                    701  		MOVE.L	#MO_X,A3
00002096  287C 0000217E                    702  		MOVE.L	#MO_Y,A4
0000209C                                   703  
0000209C  7C00                             704  MO_L4:		MOVEQ	#0,D6			LCV for column
0000209E                                   705  
0000209E  1033 6000                        706  MO_L5:		MOVE.B	0(A3,D6),D0
000020A2  1234 7000                        707  		MOVE.B	0(A4,D7),D1
000020A6  4EB8 1C26                        708  		JSR	POSITION
000020AA                                   709  
000020AA                                   710  
000020AA  23FC 20202020 0000213E           711  		MOVE.L	#$20202020,MO_OUT  	Set output to all spaces
000020B4  23FC 20202020 00002142           712  		MOVE.L	#$20202020,MO_OUT+4
000020BE  23FC 20200000 00002146           713  		MOVE.L	#$20200000,MO_OUT+8
000020C8                                   714  
000020C8  2079 00002196                    715  		MOVE.L	MO_DATA,A0
000020CE  3039 0000219C                    716  		MOVE.W	MO_COL,D0
000020D4  C0C7                             717  		MULU	D7,D0			D0=row*col
000020D6  C0FC 0004                        718  		MULU	#4,D0			*4
000020DA                                   719  
000020DA  3206                             720  		MOVE.W	D6,D1
000020DC  C2FC 0004                        721  		MULU	#4,D1
000020E0  D041                             722  		ADD.W	D1,D0
000020E2                                   723  
000020E2  2230 0000                        724  		MOVE.L	0(A0,D0),D1		Store entry in Matrix Buffer
000020E6                                   725  
000020E6  207C 00002148                    726  		MOVE.L	#MO_OUT+10,A0
000020EC  4EB8 1B36                        727  		JSR	LTOA
000020F0                                   728  
000020F0  207C 0000213E                    729  		MOVE.L	#MO_OUT,A0
000020F6  4EB8 1502                        730  		JSR	PRINT
000020FA                                   731  
000020FA  5246                             732  		ADDQ.W	#1,D6
000020FC  BC79 0000219C                    733  		CMP.W	MO_COL,D6
00002102  669A                             734  		BNE	MO_L5
00002104                                   735  
00002104  5247                             736  		ADDQ.W	#1,D7
00002106  BE79 0000219A                    737  		CMP.W	MO_ROW,D7
0000210C  668E                             738  		BNE	MO_L4
0000210E                                   739  
0000210E                                   740  
0000210E                                   741  * PRINT PROMPT
0000210E  303C 0000                        742  		MOVE.W	#0,D0
00002112  323C 0016                        743  		MOVE.W	#22,D1
00002116  4EB8 1C26                        744  		JSR	POSITION
0000211A  207C 00002152                    745  		MOVE.L	#MO_PROMPT,A0
00002120  4EB8 1502                        746  		JSR	PRINT
00002124                                   747  
00002124  4EB8 14F0                        748  MO_LKEY:	JSR	GETC
00002128  0C00 000D                        749  		CMPI.B	#13,D0
0000212C  66F6                             750  		BNE	MO_LKEY	
0000212E                                   751  
0000212E                                   752  * Go back to 80 column mode
0000212E  207C 000021A4                    753  		MOVE.L	#MO_32OFF,A0
00002134  4EB8 1502                        754  		JSR	PRINT
00002138                                   755  
00002138                                   756  * Return to calling routine
00002138                                   757  
00002138  4CDF 7FFF                        758  		MOVEM.L	(A7)+,A0-A6/D0-D7	Restore Registers
0000213C                                   759  
0000213C  4E75                             760  		RTS				Return to caller
0000213E                                   761  
0000213E                                   762  
0000213E  2D 31 30 30 30 00 00 00 00 ...   763  MO_OUT:         DC.B    '-1000',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00002152  50 72 65 73 73 20 52 65 74 ...   764  MO_PROMPT:      DC.B    'Press Return Key...',0
00002166  1B 5B 30 6D 00 00                765  MO_HOFF:        DC.B    27,'[0m',0,0
0000216C  1B 5B 32 30 3B 32 33 72 00 00    766  MO_SSR:         DC.B    27,'[20;23r',0,0
00002176  1B 5B 30 3B 32 34 72 00          767  MO_SRR:         DC.B    27,'[0;24r',0
0000217E  00 00 00 00 00 00 00 00 00 ...   768  MO_Y:           DC.B    0,0,0,0,0,0,0,0,0,0,0,0
0000218A  00 00 00 00 00 00 00 00 00 ...   769  MO_X:           DC.B    0,0,0,0,0,0,0,0,0,0,0,0
00002196  00000000                         770  MO_DATA:        DC.L    0
0000219A  0000                             771  MO_ROW:         DC.W    0
0000219C  0000                             772  MO_COL:         DC.W    0
0000219E  1B 5B 3F 33 68 00                773  MO_32ON:	DC.B	27,'[?3h',0
000021A4  1B 5B 3F 33 6C 00                774  MO_32OFF:	DC.B	27,'[?3l',0
000021AA                                   775  
000021AA                                   776  
000021AA                                   777  *
000021AA                                   778  *	 MATIN
000021AA                                   779  *
000021AA                                   780  * This routine allows the user to enter the elements of a matrix
000021AA                                   781  *
000021AA                                   782  * D0 contains the number of columns
000021AA                                   783  * D1 contains the number of rows
000021AA                                   784  *
000021AA                                   785  * A0 contains a pointer to a buffer to store matrix elements in
000021AA                                   786  * A1 contains a pointer to the a title string
000021AA                                   787  *
000021AA                                   788  * By: Bradford W. Mott
000021AA                                   789  *
000021AA                                   790  
000021AA                                   791  
000021AA  48E7 FFFE                        792  MATIN:		MOVEM.L	A0-A6/D0-D7,-(A7)	Save registers on stack
000021AE                                   793  
000021AE  23C8 00002460                    794  		MOVE.L	A0,MI_DATA		Store buffer address
000021B4  33C0 00002464                    795  		MOVE.W	D0,MI_ROW		Store num of rows
000021BA  33C1 00002466                    796  		MOVE.W	D1,MI_COL		Store num of columns
000021C0                                   797  
000021C0  4EB8 1C00                        798  		JSR	CLEAR			Clear the display
000021C4                                   799  
000021C4  303C 0021                        800  		MOVE.W	#33,D0			X position of cursor
000021C8  323C 0002                        801  		MOVE.W	#2,D1			Y position of cursor
000021CC  4EB8 1C26                        802  		JSR	POSITION		Position the Cursor
000021D0                                   803  
000021D0  2049                             804  		MOVE.L	A1,A0			Print the Title String
000021D2  4EB8 1502                        805  		JSR	PRINT
000021D6                                   806  
000021D6                                   807  
000021D6  207C 00002447                    808  		MOVE.L	#MI_Y,A0		Pointer to Y position array
000021DC  7000                             809  		MOVEQ	#0,D0			Clear LCV (Loop Control Var)
000021DE                                   810  
000021DE  323C 0014                        811  MI_L1:		MOVE.W	#20,D1			Calculate Y position
000021E2  9279 00002464                    812  		SUB.W	MI_ROW,D1
000021E8  82FC 0002                        813  		DIVU	#2,D1
000021EC  D240                             814  		ADD.W	D0,D1			(20-row)/2+counter
000021EE  1181 0000                        815  		MOVE.B	D1,0(A0,D0)		Store in array
000021F2                                   816  
000021F2  5240                             817  		ADDQ.W	#1,D0
000021F4  B079 00002464                    818  		CMP.W	MI_ROW,D0
000021FA  66E2                             819  		BNE	MI_L1
000021FC                                   820  
000021FC                                   821  
000021FC  207C 00002453                    822  		MOVE.L	#MI_X,A0		Pointer to X position array
00002202  7000                             823  		MOVEQ	#0,D0			Clear LCV (Loop Control Var)
00002204                                   824  
00002204  323C 0050                        825  MI_L2:		MOVE.W	#80,D1			Calculate X position
00002208  3439 00002466                    826  		MOVE.W  MI_COL,D2
0000220E  C4FC 0006                        827  		MULU	#6,D2
00002212  9242                             828  		SUB.W	D2,D1
00002214  82FC 0002                        829  		DIVU	#2,D1
00002218  3400                             830  		MOVE.W	D0,D2
0000221A  C4FC 0006                        831  		MULU	#6,D2
0000221E  D242                             832  		ADD.W	D2,D1			(80-col*6)/2+counter*6
00002220  1181 0000                        833  		MOVE.B	D1,0(A0,D0)		Store in array
00002224                                   834  
00002224  5240                             835  		ADDQ.W	#1,D0
00002226  B079 00002466                    836  		CMP.W	MI_COL,D0
0000222C  66D6                             837  		BNE	MI_L2
0000222E                                   838  
0000222E                                   839  
0000222E                                   840  * Draw the Matrix outline
0000222E                                   841  
0000222E  207C 00002447                    842  		MOVE.L	#MI_Y,A0		Pointer to Y position array
00002234  7E00                             843  		MOVEQ	#0,D7			Clear LCV (Loop Control Var)
00002236                                   844  
00002236  303C 0050                        845  MI_L3:		MOVE.W	#80,D0			Calculate X position
0000223A  3239 00002466                    846  		MOVE.W	MI_COL,D1
00002240  C2FC 0006                        847  		MULU	#6,D1
00002244  9041                             848  		SUB.W	D1,D0
00002246  80FC 0002                        849  		DIVU	#2,D0
0000224A  5540                             850  		SUBI.W	#2,D0			D0=(80-col*6)/2-2
0000224C                                   851  
0000224C  1230 7000                        852  		MOVE.B	0(A0,D7),D1		Get Y Position
00002250                                   853  
00002250  4EB8 1C26                        854  		JSR	POSITION		Position Cursor
00002254  103C 007C                        855  		MOVE.B	#$7C,D0			the "|" character
00002258  4EB8 14D0                        856  		JSR	PUTC
0000225C                                   857  
0000225C                                   858  
0000225C  303C 0050                        859  		MOVE.W	#80,D0			Calculate X position
00002260  3239 00002466                    860  		MOVE.W	MI_COL,D1
00002266  C2FC 0006                        861  		MULU	#6,D1
0000226A  9041                             862  		SUB.W	D1,D0
0000226C  80FC 0002                        863  		DIVU	#2,D0
00002270  D041                             864  		ADD.W	D1,D0			D0=(80-col*6)/2+col*6
00002272                                   865  
00002272  1230 7000                        866  		MOVE.B	0(A0,D7),D1		Get Y Position
00002276                                   867  
00002276  4EB8 1C26                        868  		JSR	POSITION		Position Cursor
0000227A  103C 007C                        869  		MOVE.B	#$7C,D0			the "|" character
0000227E  4EB8 14D0                        870  		JSR	PUTC
00002282                                   871  
00002282  5247                             872  		ADDQ.W	#1,D7
00002284  BE79 00002464                    873  		CMP.W	MI_ROW,D7
0000228A  66AA                             874  		BNE	MI_L3
0000228C                                   875  
0000228C                                   876  
0000228C                                   877  
0000228C                                   878  * Set the Display scrolling region
0000228C                                   879  
0000228C  207C 00002435                    880  		MOVE.L	#MI_SSR,A0		Addr of string
00002292  4EB8 1502                        881  		JSR	PRINT
00002296                                   882  
00002296                                   883  
00002296                                   884  * Get the data for each element.
00002296                                   885  
00002296  7E00                             886  		MOVEQ	#0,D7			LCV for row
00002298  267C 00002453                    887  		MOVE.L	#MI_X,A3
0000229E  287C 00002447                    888  		MOVE.L	#MI_Y,A4
000022A4                                   889  
000022A4  7C00                             890  MI_L4:		MOVEQ	#0,D6			LCV for column
000022A6                                   891  
000022A6  1033 6000                        892  MI_L5:		MOVE.B	0(A3,D6),D0
000022AA  1234 7000                        893  		MOVE.B	0(A4,D7),D1
000022AE  4EB8 1C26                        894  		JSR	POSITION
000022B2                                   895  
000022B2  207C 00002427                    896  		MOVE.L	#MI_HON,A0		Turn Highlight on
000022B8  4EB8 1502                        897  		JSR	PRINT
000022BC                                   898  
000022BC  207C 00002420                    899  		MOVE.L	#MI_SPACE,A0		Print Space
000022C2  4EB8 1502                        900  		JSR	PRINT
000022C6                                   901  
000022C6  207C 0000242F                    902  		MOVE.L	#MI_HOFF,A0		Turn Highlight off
000022CC  4EB8 1502                        903  		JSR	PRINT
000022D0                                   904  
000022D0  303C 0000                        905  		MOVE.W	#0,D0
000022D4  323C 0017                        906  		MOVE.W	#23,D1
000022D8  4EB8 1C26                        907  		JSR	POSITION
000022DC                                   908  
000022DC  207C 000023F2                    909  MI_AGAIN:	MOVE.L	#MI_PROMPT,A0		Print prompt
000022E2  4EB8 1502                        910  		JSR	PRINT
000022E6                                   911  
000022E6  207C 000023E4                    912  		MOVE.L	#MI_INPUT,A0
000022EC  227C 000023D8                    913  		MOVE.L	#MI_VALID,A1
000022F2  7005                             914  		MOVE.L	#5,D0
000022F4  4EB8 1430                        915  		JSR	INPUT			INPUT the number
000022F8                                   916  
000022F8  700A                             917  		MOVE.L	#10,D0			NEWLINE
000022FA  4EB8 14D0                        918  		JSR	PUTC
000022FE                                   919  
000022FE  207C 000023E4                    920  		MOVE.L	#MI_INPUT,A0
00002304  4EB8 1B7E                        921  		JSR	ATOL			Convert ASCII to Long INT
00002308  23C0 000023B6                    922  		MOVE.L	D0,MI_INN
0000230E                                   923  
0000230E  0C40 03E8                        924  		CMPI.W	#1000,D0		Make sure number is right
00002312  6E00 000E                        925  		BGT	MI_ER			size
00002316  0C40 FC18                        926  		CMPI.W	#-1000,D0
0000231A  6D00 0006                        927  		BLT	MI_ER
0000231E                                   928  		
0000231E  6000 0010                        929  		BRA	MI_NER
00002322                                   930  
00002322  207C 00002402                    931  MI_ER:		MOVE.L	#MI_ERROR,A0		Print Error Message
00002328  4EB8 1502                        932  		JSR	PRINT
0000232C  4EF8 22DC                        933  		JMP	MI_AGAIN		Try Again!!!
00002330                                   934  
00002330  23FC 20202020 000023CA           935  MI_NER:		MOVE.L	#$20202020,MI_OUT  	Set output to all spaces
0000233A  23FC 20000000 000023CE           936  		MOVE.L	#$20000000,MI_OUT+4
00002344  207C 000023D0                    937  		MOVE.L	#MI_OUT+6,A0
0000234A  7200                             938  		MOVEQ	#0,D1
0000234C  2239 000023B6                    939  		MOVE.L	MI_INN,D1
00002352  4EB8 1B36                        940  		JSR	LTOA
00002356                                   941  
00002356  1033 6000                        942         		MOVE.B 0(A3,D6),D0
0000235A  1234 7000                        943  		MOVE.B 0(A4,D7),D1
0000235E  4EB8 1C26                        944  		JSR	POSITION
00002362                                   945  
00002362  207C 000023CA                    946  		MOVE.L	#MI_OUT,A0		Print Entry
00002368  4EB8 1502                        947  		JSR	PRINT
0000236C                                   948  
0000236C  2079 00002460                    949  		MOVE.L	MI_DATA,A0
00002372  3039 00002466                    950  		MOVE.W	MI_COL,D0
00002378  C0C7                             951  		MULU	D7,D0			D0=row*col
0000237A  C0FC 0002                        952  		MULU	#2,D0			*2
0000237E                                   953  
0000237E  3206                             954  		MOVE.W	D6,D1
00002380  C2FC 0002                        955  		MULU	#2,D1
00002384  D041                             956  		ADD.W	D1,D0
00002386                                   957  
00002386  21B9 000023B8 0000               958  		MOVE.L	MI_INN+2,0(A0,D0)		Store entry in Matrix Buffer
0000238E                                   959  
0000238E  5246                             960  		ADDQ.W	#1,D6
00002390  BC79 00002466                    961  		CMP.W	MI_COL,D6
00002396  6600 FF0E                        962  		BNE	MI_L5
0000239A                                   963  
0000239A  5247                             964  		ADDQ.W	#1,D7
0000239C  BE79 00002464                    965  		CMP.W	MI_ROW,D7
000023A2  6600 FF00                        966  		BNE	MI_L4
000023A6                                   967  
000023A6                                   968  * Reset the terminal's scrolling region
000023A6                                   969  
000023A6  207C 0000243F                    970  		MOVE.L	#MI_SRR,A0
000023AC  4EB8 1502                        971  		JSR	PRINT
000023B0                                   972  
000023B0                                   973  
000023B0                                   974  * Return to calling routine
000023B0                                   975  
000023B0  4CDF 7FFF                        976  		MOVEM.L	(A7)+,A0-A6/D0-D7	Restore Registers
000023B4                                   977  
000023B4  4E75                             978  		RTS				Return to caller
000023B6                                   979  
000023B6                                   980  
000023B6  00000000 00000000 00000000 ...   981  MI_INN:         DC.L   0,0,0,0,0
000023CA  2D 31 30 30 30 00 00 00 00 ...   982  MI_OUT:         DC.B    '-1000',0,0,0,0,0,0,0,0,0
000023D8  30 31 32 33 34 35 36 37 38 ...   983  MI_VALID:       DC.B    '0123456789-',0
000023E4  00 00 00 00 00 00 00 00 00 ...   984  MI_INPUT:       DC.B    0,0,0,0,0,0,0,0,0,0,0,0,0,0
000023F2  45 6E 74 65 72 20 45 6C 65 ...   985  MI_PROMPT:      DC.B    'Enter Element: ',0
00002402  2A 2A 2A 20 50 72 6F 62 6C ...   986  MI_ERROR:       DC.B    '*** Problem with entry!!!!',10,10,0,0
00002420  20 20 20 20 20 00 00             987  MI_SPACE:       DC.B    '     ',0,0
00002427  1B 5B 35 3B 37 6D 00 00          988  MI_HON:         DC.B    27,'[5;7m',0,0
0000242F  1B 5B 30 6D 00 00                989  MI_HOFF:        DC.B    27,'[0m',0,0
00002435  1B 5B 32 30 3B 32 33 72 00 00    990  MI_SSR:         DC.B    27,'[20;23r',0,0
0000243F  1B 5B 30 3B 32 34 72 00          991  MI_SRR:         DC.B    27,'[0;24r',0
00002447  00 00 00 00 00 00 00 00 00 ...   992  MI_Y:           DC.B    0,0,0,0,0,0,0,0,0,0,0,0
00002453  00 00 00 00 00 00 00 00 00 ...   993  MI_X:           DC.B    0,0,0,0,0,0,0,0,0,0,0,0
00002460  00000000                         994  MI_DATA:        DC.L    0
00002464  0000                             995  MI_ROW:         DC.W    0
00002466  0000                             996  MI_COL:         DC.W    0
00002468                                   997  
00002468                                   998  
00002468  207C 000024A8                    999  EXIT:		MOVE.L		#QUITMSG,A0	*INITIALIZE QUIT PROMPT
0000246E  4EB8 1502                       1000  		JSR 		PRINT		*PRINT QUIT PROMPT
00002472  4EB8 14F0                       1001  		JSR		GETC		*GET RESPONSE
00002476  B03C 0059                       1002  		CMP.B		#$59,D0		*A VALID CHARACTER?
0000247A  6700 001C                       1003  		BEQ		QSTRT		*YES, START OVER
0000247E  B03C 0079                       1004  		CMP.B		#$79,D0		*A VALID CHARACTER?
00002482  6700 0014                       1005  		BEQ		QSTRT		*YES, START OVER
00002486  B03C 004E                       1006  		CMP.B		#$4E,D0		*A VALID CHARACTER?
0000248A  6700 0010                       1007  		BEQ		QFIN		*NO, QUIT PROGRAM
0000248E  B03C 006E                       1008  		CMP.B		#$6E,D0		*A VALID CHARACTER?
00002492  6700 0008                       1009  		BEQ		QFIN		*NO, QUIT PROGRAM
00002496  60D0                            1010  		BRA		EXIT		*NOT A VALID CHARACTER
00002498                                  1011  
00002498  6000 EB90                       1012  QSTRT:		BRA		MAIN		*RE-EXECUTE MAIN PROGRAM
0000249C                                  1013  
0000249C  207C 000024CD                   1014  QFIN:		MOVE.L		#ENDMSG,A0	*INITIALIZE FINAL MESSAGE
000024A2  4EB8 1502                       1015  		JSR		PRINT		*PRINT FINAL MESSAGE
000024A6  60FE                            1016  NOMOE:		BRA		NOMOE		*INFINITE LOOP
000024A8                                  1017  
000024A8  0A 4D 75 6C 74 69 70 6C 79 ...  1018  QUITMSG:	DC.B		10,'Multiply Another Set? <Y,y,N,n>...',0,0
000024CD  0A 0A 54 48 41 4E 4B 20 59 ...  1019  ENDMSG:		DC.B		10,10,'THANK YOU, GOODBYE..',0
000024E4                                  1020  
000024E4                                  1021  

No errors detected
No warnings generated
